name: Unittests & Auto-publish

# Allow to trigger the workflow manually (e.g. when deps changes)
on: [push, workflow_dispatch]

jobs:
  pytest-job:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true
    
    steps:
    - uses: actions/checkout@v4
    
    # Install deps
    - uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        # Uncomment to cache of pip dependencies (if tests too slow)
        # cache: pip
        # cache-dependency-path: '**/pyproject.toml'
    
    - run: pip --version
    - run: pip install -e .[dev]
    - run: pip freeze
    - run: pytest -v
    
  publish-job:
    # Only try to publish if:
    # * Repo is self (prevents running from forks)
    # * Branch is `main`
    if: |
      github.repository == 'VishwamAI/VishwamAI'
      && github.ref == 'refs/heads/main'
    needs: pytest-job  # Only publish after tests are successful
    runs-on: ubuntu-latest
    permissions:
      contents: write
    timeout-minutes: 30
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for proper version detection
    
    - uses: actions/setup-python@v5
      with:
        python-version: "3.11"
    
    # Install build dependencies
    - run: pip install build twine
    
    # Build package
    - run: python -m build
    
    # Upload to PyPI
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: twine upload dist/*
    
    # Create GitHub Release if new version
    - name: Check version and create GitHub release
      id: check_version
      run: |
        VERSION=$(python -c "import vishwamai; print(vishwamai.__version__)")
        echo "Current version: $VERSION"
        
        # Set version for next steps
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        
        # Check if this version already exists as a GitHub release
        if ! git ls-remote --tags origin | grep -q refs/tags/v$VERSION; then
          echo "Creating new release for v$VERSION"
          echo "CREATE_RELEASE=true" >> $GITHUB_ENV
        else
          echo "Release v$VERSION already exists"
          echo "CREATE_RELEASE=false" >> $GITHUB_ENV
        fi
    
    - name: Create Release
      if: env.CREATE_RELEASE == 'true'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ env.VERSION }}
        name: Release v${{ env.VERSION }}
        draft: false
        prerelease: false
        generate_release_notes: true