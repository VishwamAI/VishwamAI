groups:
  - name: vishwamai_alerts
    rules:
    # Performance alerts
    - alert: HighLatency
      expr: rate(inference_latency_seconds_sum[5m]) / rate(inference_latency_seconds_count[5m]) > 0.1
      for: 5m
      labels:
        severity: warning
      annotations:
        summary: High inference latency
        description: Inference latency is above 100ms threshold for 5 minutes

    - alert: HighErrorRate
      expr: rate(inference_errors_total[5m]) / rate(inference_requests_total[5m]) > 0.001
      for: 5m
      labels:
        severity: critical
      annotations:
        summary: High error rate
        description: Error rate is above 0.1% threshold for 5 minutes

    # Resource utilization alerts
    - alert: HighGPUUsage
      expr: gpu_utilization_percent > 85
      for: 10m
      labels:
        severity: warning
      annotations:
        summary: High GPU utilization
        description: GPU utilization above 85% for 10 minutes

    - alert: HighMemoryUsage
      expr: memory_usage_bytes / memory_total_bytes > 0.9
      for: 5m
      labels:
        severity: warning
      annotations:
        summary: High memory usage
        description: Memory usage above 90% for 5 minutes

    # MoE-specific alerts
    - alert: ExpertImbalance
      expr: max(expert_utilization_percent) > 3 * min(expert_utilization_percent)
      for: 15m
      labels:
        severity: warning
      annotations:
        summary: Expert load imbalance detected
        description: Large disparity in expert utilization detected for 15 minutes

    - alert: LowRoutingEfficiency
      expr: token_routing_efficiency < 0.7
      for: 10m
      labels:
        severity: warning
      annotations:
        summary: Low token routing efficiency
        description: Token routing efficiency below 70% for 10 minutes

    - alert: HighExpertCapacityUsage
      expr: avg(expert_utilization_percent) > 90
      for: 5m
      labels:
        severity: warning
      annotations:
        summary: High expert capacity usage
        description: Average expert utilization above 90% for 5 minutes

    - alert: ExpertFailure
      expr: sum(expert_errors_total) > 0
      for: 1m
      labels:
        severity: critical
      annotations:
        summary: Expert failure detected
        description: One or more experts are failing to process requests

    # Cache-related alerts
    - alert: LowCacheHitRate
      expr: kv_cache_hit_rate < 0.6
      for: 15m
      labels:
        severity: warning
      annotations:
        summary: Low KV cache hit rate
        description: Cache hit rate below 60% for 15 minutes

    - alert: HighCacheEvictionRate
      expr: rate(cache_evictions_total[5m]) > 100
      for: 5m
      labels:
        severity: warning
      annotations:
        summary: High cache eviction rate
        description: Cache eviction rate exceeds 100 per second for 5 minutes

    # Training-specific alerts
    - alert: TrainingStall
      expr: rate(training_step_count[15m]) == 0
      for: 5m
      labels:
        severity: critical
      annotations:
        summary: Training has stalled
        description: No training steps completed in the last 15 minutes

    - alert: LossSpike
      expr: training_loss > 2 * avg_over_time(training_loss[1h])
      for: 5m
      labels:
        severity: warning
      annotations:
        summary: Unusual loss spike detected
        description: Training loss has more than doubled compared to 1-hour average

    - alert: CheckpointFailure
      expr: rate(checkpoint_failure_count[1h]) > 0
      for: 5m
      labels:
        severity: critical
      annotations:
        summary: Checkpoint creation failed
        description: One or more checkpoints failed to save in the last hour

    - alert: LearningRateStuck
      expr: rate(learning_rate[1h]) == 0 and training_step_count > 1000
      for: 30m
      labels:
        severity: warning
      annotations:
        summary: Learning rate not changing
        description: Learning rate has remained constant for 30 minutes after warm-up

    - alert: GPUMemoryLeak
      expr: rate(gpu_memory_used_bytes[1h]) > 0 and rate(training_step_count[1h]) > 0
      for: 2h
      labels:
        severity: warning
      annotations:
        summary: Potential GPU memory leak
        description: GPU memory usage is steadily increasing during training

    # System health alerts
    - alert: HighSystemLoad
      expr: system_load5 > 3
      for: 5m
      labels:
        severity: warning
      annotations:
        summary: High system load
        description: System load average is high for 5 minutes

    - alert: ServiceDown
      expr: up == 0
      for: 1m
      labels:
        severity: critical
      annotations:
        summary: Service is down
        description: VishwamAI service is not responding

    # MoE scaling alerts
    - alert: ExpertScalingNeeded
      expr: |
        sum(expert_utilization_percent) > 85 and
        rate(inference_latency_seconds_sum[5m]) / rate(inference_latency_seconds_count[5m]) > 0.08
      for: 10m
      labels:
        severity: warning
      annotations:
        summary: Expert scaling needed
        description: High expert utilization with increased latency detected

    - alert: SuboptimalExpertAllocation
      expr: stddev(expert_utilization_percent) / avg(expert_utilization_percent) > 0.3
      for: 15m
      labels:
        severity: warning
      annotations:
        summary: Suboptimal expert allocation
        description: High variance in expert utilization detected
